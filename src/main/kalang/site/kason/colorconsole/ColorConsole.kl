import org.fusesource.jansi.AnsiConsole;
import org.fusesource.jansi.Ansi;

/**
 *
 * @author Kason Yang
 */
class{

    private static ColorConsole instance;

    private Ansi$Color infoColor;
    private Ansi$Color warnColor;
    private Ansi$Color statusColor;

    private Object statusText = "";
    
    public static void main(String[] args){
        int delay = 100;
        ColorConsole cc = getDefault();
        cc.info("info message\n");
        cc.warn("err message\n");
        cc.status("testing info ");
        for(int i=0;i<100;i++){
            cc.status("Progress " + i + "%");
            Thread.sleep(delay);
        }
        cc.clearStatus();
        Thread.sleep(delay);
    }

    public static synchronized ColorConsole getDefault() {
        if (instance == null) {
            AnsiConsole.systemInstall();
            instance = new ColorConsole();
        }
        return instance;
    }

    public void info(Object text) {
        print(text, infoColor);
    }

    public void warn(Object text) {
        print(text, warnColor);
    }

    public void status(Object text) {
        this.statusText = text;
        clearStatus();
        showStatus();
    }

    public void clearStatus() { 
        System.out.print(Ansi.ansi().restoreCursorPosition().eraseLine(Ansi$Erase.FORWARD));
    }

    public void print(Object text, Ansi$Color color) {
        clearStatus();
        System.out.print(Ansi.ansi().fg(color).a(text));
        showStatus();
    }

    public Ansi$Color getInfoColor() {
        return infoColor;
    }

    public void setInfoColor(Ansi$Color infoColor) {
        this.infoColor = infoColor;
    }

    public Ansi$Color getWarnColor() {
        return warnColor;
    }

    public void setWarnColor(Ansi$Color warnColor) {
        this.warnColor = warnColor;
    }

    public Ansi$Color getStatusColor() {
        return statusColor;
    }

    public void setStatusColor(Ansi$Color statusColor) {
        this.statusColor = statusColor;
    }

    private void showStatus() {
        System.out.print(Ansi.ansi().saveCursorPosition().fg(statusColor).a(statusText).fg(Ansi$Color.DEFAULT));
        System.out.flush();
    }

    private constructor() {
        infoColor = Ansi$Color.WHITE;
        warnColor = Ansi$Color.RED;
        statusColor = Ansi$Color.YELLOW;
        this.showStatus();
    }

}
